esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

substitutions:
  name: bt-vevor-ble
  friendly_name: Diesel_Standheizung
  service_uuid: "0000fff0-0000-1000-8000-00805f9b34fb"
  char_fff1_uuid: "0000fff1-0000-1000-8000-00805f9b34fb"
  char_fff2_uuid: "0000fff2-0000-1000-8000-00805f9b34fb"
  heater_mac: "EC:B1:C3:00:3C:56"

esp32_ble_tracker:

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:
  level: DEBUG

api:

ota:
  platform: esphome

web_server:
  port: 80
  version: 1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "VevorBLE Hotspot"
    password: "12345678"

globals:
  - id: ble_verbunden
    type: bool
    initial_value: 'false'
  - id: aktueller_modus
    type: int
    initial_value: '1'
  - id: command_aktiv
    type: bool
    initial_value: 'false'

interval:
  - interval: 5s
    then:
      - if:
          condition:
            lambda: 'return id(ble_verbunden) && !id(command_aktiv);'
          then:
            - ble_client.ble_write:
                id: heizung_ble
                service_uuid: ${service_uuid}
                characteristic_uuid: ${char_fff2_uuid}
                value: [0xBA, 0xAB, 0x04, 0xCC, 0x00, 0x00, 0x00, 0x35]

ble_client:
  - mac_address: ${heater_mac}
    id: heizung_ble
    on_connect:
      - lambda: 'id(ble_verbunden) = true;'
      - logger.log: "BLE Verbunden"
      - delay: 2s
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xCC, 0x00, 0x00, 0x00, 0x35]
          
    on_disconnect:
      - lambda: 'id(ble_verbunden) = false;'
      - logger.log: "BLE Getrennt"

text_sensor:
  - platform: template
    name: "Betriebsmodus"
    id: betriebsmodus_text

  - platform: template
    name: "Heizungsstatus"
    id: heizung_status_text

binary_sensor:
  - platform: template
    name: "Heizung Status"
    id: heizung_an_sensor

sensor:
  - platform: template
    name: "Zielwert"
    id: zielwert
    accuracy_decimals: 0

  - platform: template
    name: "Raumtemperatur"
    id: raumtemperatur
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "Batteriespannung"
    id: batteriespannung
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage

  - platform: template
    name: "Schalentemperatur"
    id: schalentemperatur
    unit_of_measurement: "°C"
    accuracy_decimals: 0

  - platform: ble_client
    type: characteristic
    id: ble_antwort
    ble_client_id: heizung_ble
    service_uuid: ${service_uuid}
    characteristic_uuid: ${char_fff1_uuid}
    name: "BLE Rohdaten"
    notify: true
    lambda: |-
      if (x.size() >= 21 && x[0] == 0xAB && x[1] == 0xBA) {
        uint8_t strom = x[4];
        uint8_t modus_flag = x[5];
        uint8_t ziel = x[6];
        uint8_t betrieb_zustand = x[7];
        uint8_t spannung = x[9];
        float raumtemp = x[11] / 2.5;
        uint8_t schalentemp = x[13];
        
        const char* zustand_namen[] = {"Bereit", "Aufwärmen", "Selbsttest", "Zündung", "Heizen", "Herunterfahren"};
        const char* strom_status = (strom == 0x00) ? "AUS" : (strom == 0x01) ? "EIN" : "Kühlphase";
        
        ESP_LOGW("BLE", "Strom: %s | Modus: %s | Ziel: %d", strom_status, modus_flag ? "Automatik" : "Manuell", ziel);
        
        id(heizung_an_sensor).publish_state(strom == 0x01);
        id(heizung_schalter).publish_state(strom == 0x01);
        id(aktueller_modus) = modus_flag;
        id(zielwert).publish_state(ziel);
        id(raumtemperatur).publish_state(raumtemp);
        id(batteriespannung).publish_state(spannung);
        id(schalentemperatur).publish_state(schalentemp);
        id(betriebsmodus_text).publish_state(modus_flag ? "Automatik" : "Manuell");
        
        std::string status_text = strom_status;
        if (strom == 0x01 && betrieb_zustand < 6) {
          status_text = status_text + " - " + zustand_namen[betrieb_zustand];
        }
        id(heizung_status_text).publish_state(status_text);
      }
      return x.size();

switch:
  - platform: template
    name: "Heizung Ein/Aus"
    id: heizung_schalter
    icon: "mdi:fire"
    optimistic: true
    turn_on_action:
      - lambda: 'id(command_aktiv) = true;'
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA1, 0x00, 0x00, 0xC5]
      - delay: 1000ms
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xCC, 0x00, 0x00, 0x00, 0x35]
      - delay: 500ms
      - lambda: 'id(command_aktiv) = false;'
    turn_off_action:
      - lambda: 'id(command_aktiv) = true;'
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA1, 0x00, 0x00, 0xC5]
      - delay: 1000ms
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xCC, 0x00, 0x00, 0x00, 0x35]
      - delay: 500ms
      - lambda: 'id(command_aktiv) = false;'

  - platform: template
    name: "Lüfter"
    id: luefter_modus
    icon: "mdi:fan"
    optimistic: true
    turn_on_action:
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA4, 0x00, 0x00, 0xC8]
    turn_off_action:
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA4, 0x00, 0x00, 0xC8]

  - platform: template
    name: "Höhenmodus"
    id: hoehenmodus
    icon: "mdi:mountain"
    optimistic: true
    turn_on_action:
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA5, 0x00, 0x00, 0xC9]
    turn_off_action:
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xA5, 0x00, 0x00, 0xC9]

button:
  - platform: template
    name: "Modus Wechseln"
    icon: "mdi:swap-horizontal"
    on_press:
      - ble_client.ble_write:
          id: heizung_ble
          service_uuid: ${service_uuid}
          characteristic_uuid: ${char_fff2_uuid}
          value: [0xBA, 0xAB, 0x04, 0xBB, 0xAD, 0x00, 0x00, 0xD1]

  - platform: template
    name: "Temperatur/Gebläse +"
    icon: "mdi:thermometer-plus"
    on_press:
      - if:
          condition:
            lambda: 'return id(aktueller_modus) == 1;'
          then:
            - ble_client.ble_write:
                id: heizung_ble
                service_uuid: ${service_uuid}
                characteristic_uuid: ${char_fff2_uuid}
                value: [0xBA, 0xAB, 0x04, 0xBB, 0xA2, 0x00, 0x00, 0xC6]

  - platform: template
    name: "Temperatur/Gebläse -"
    icon: "mdi:thermometer-minus"
    on_press:
      - if:
          condition:
            lambda: 'return id(aktueller_modus) == 1;'
          then:
            - ble_client.ble_write:
                id: heizung_ble
                service_uuid: ${service_uuid}
                characteristic_uuid: ${char_fff2_uuid}
                value: [0xBA, 0xAB, 0x04, 0xBB, 0xA3, 0x00, 0x00, 0xC7]

number:
  - platform: template
    name: "Zieltemperatur"
    id: temperatur_slider
    min_value: 8
    max_value: 36
    step: 1
    unit_of_measurement: "°C"
    mode: slider
    optimistic: false
    lambda: 'return (id(aktueller_modus) == 1) ? id(zielwert).state : (float)NAN;'
    set_action:
      - if:
          condition:
            lambda: 'return id(aktueller_modus) == 1 && (int)x != (int)id(zielwert).state;'
          then:
            - repeat:
                count: !lambda 'return abs((int)x - (int)id(zielwert).state);'
                then:
                  - ble_client.ble_write:
                      id: heizung_ble
                      service_uuid: ${service_uuid}
                      characteristic_uuid: ${char_fff2_uuid}
                      value: !lambda 'return ((int)x > (int)id(zielwert).state) ? std::vector<uint8_t>{0xBA, 0xAB, 0x04, 0xBB, 0xA2, 0x00, 0x00, 0xC6} : std::vector<uint8_t>{0xBA, 0xAB, 0x04, 0xBB, 0xA3, 0x00, 0x00, 0xC7};'
                  - delay: 300ms

  - platform: template
    name: "Gebläsestufe"
    id: level_slider
    min_value: 1
    max_value: 6
    step: 1
    mode: slider
    optimistic: false
    lambda: 'return (id(aktueller_modus) == 0) ? id(zielwert).state : (float)NAN;'
    set_action:
      - if:
          condition:
            lambda: 'return id(aktueller_modus) == 0 && (int)x != (int)id(zielwert).state;'
          then:
            - repeat:
                count: !lambda 'return abs((int)x - (int)id(zielwert).state);'
                then:
                  - ble_client.ble_write:
                      id: heizung_ble
                      service_uuid: ${service_uuid}
                      characteristic_uuid: ${char_fff2_uuid}
                      value: !lambda 'return ((int)x > (int)id(zielwert).state) ? std::vector<uint8_t>{0xBA, 0xAB, 0x04, 0xBB, 0xA2, 0x00, 0x00, 0xC6} : std::vector<uint8_t>{0xBA, 0xAB, 0x04, 0xBB, 0xA3, 0x00, 0x00, 0xC7};'
                  - delay: 300ms
